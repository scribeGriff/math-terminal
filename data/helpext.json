{
  fft: "Description: Computes a fourier transform of an array of arbitrary length.  Uses a radix-2 FFT algorithm if the length is a power of 2 and a DFT otherwise.  Accepts an optional integer value for the power of the FFT.  Syntax: y = fft(x); or, optionally, y = fft(x, 16); where x is an array of real or complex values.  Returns a complex array.  Example: x = [0,1,2,3]; y = fft(x);  See also: re, im, ifft, fsps, conv",
  ifft: "Description: Computes an inverse fourier transform of an array of arbitrary length.  Uses a radix-2 FFT algorithm if the length is a power of 2 and a DFT otherwise.  Accepts an optional integer value for the power of the FFT.  Syntax: x = ifft(y); or, optionally, x = ifft(y, 16); where y is an array of real or complex values.  Returns a complex array.  Example: x = [0,1,2,3]; y = fft(x); xr = ifft(y);  See also: re, im, fft, fsps, conv",
  fsps: "Description: Computes the partial sums of the Fourier series of a waveform.  Requires an array of values representing the input waveform.  Accepts an optional values for number of sums (default is 3), number of cycles are represented in the waveform (default is 1) and the fraction of the data to treat as a cycle (default is 1).  Syntax: y = fsps(x); or, optionally, y = fsps(x, 6, 1, 0.5);  Example: x = squarewave(); y = fsps(x); n = length(x); curve(n, re(y))  See also: squarewave, trianglewave, sawtoothwave, fft, re, im, complex",
  conv: "Description: Perform linear convolution of two signals using N point circular convolution. Accepts optional position information.  Returns the convolved array y, and its position array n.  Syntax: y = conv(xdata, hdata); or, optionally, y = conv(xdata, hdata, xpos, hpos);  Example: xdata = [3, 11, 7, 0, -1, 4, 2]; hdata = [2, 3, 0, -5, 2, 1]; yc = conv(xdata, hdata); y = gety(yc); n = getn(yc); samples(n,y)  See also: deconv, corr, gety, getn, getData",
  deconv: "Description: Performs a deconvolution (polynomial long division) of numerator and denominator.  Accepts position information.  Returns quotient, q, remainder, r, and position information, qn and rn, for each.  First coefficient assumed to be associated with highest power. For example, if the numerator was given as 1 + 2z^-1 + 2z^-2, then, var num = [1, 2, 2];  Syntax: qrem = deconv(num, den); or, optionally, qrem = deconv(num, den, numpos, denpos);  Example: (num = z^2 + z + 1 + z^-1 + z^-2 +z^-3) num = [1, 1, 1, 1, 1, 1]; nn = range(-2, 3); (The zero index is at position 2 in num.) (den = z + 2 + z^-1) den = [1, 2, 1]; dn = range(-1, 1); (The zero index is at position 1 in den.) qrem = deconv(num, den, nn, dn); q = getq(qrem); r = getr(qrem); qn = getqn(qrem); rn = getrn(qrem);  See also: conv, corr, getq, getr, getqn, getrn, getData",
  corr: "Description: Performs a crosscorrelation of seq1 and seq2, or, if seq2 is undefined, performs the autocorrelation of seq1.  Accepts position information. Returns the correlation sequence y, and its position information n.  Syntax: yc = corr(x1, x2); or, optionally, yc = corr(x1); or yc = corr(x1, x2, x1pos, x2pos);  Example: // x(n): x = [3, 11, 7, 0, -1, 4, 2]; // n = -3, -2, -1, 0, 1, 2, 3. n = range(-3, 3); // y(n) = x(n - 2) + w(n). // Shift n two places. nm2 = range(-1, 5); // Generate gaussian noise. w = gauss(size(x)); // Create noise corrupted and shifted signal. seqsum = addSeqs(x, w, nm2, nm2); // Compute cross correlation between x(n) and y(n). xcorr = corr(x, gety(seqsum), n, getn(seqsum)); y = gety(xcorr); n = getn(xcorr); samples(n,y)  See also: conv, gety, getn, gauss, samples",
  filter1d: "Description: Implements a 1D transposed direct form II digital filter structure. Supports FIR and IIR filters and inital and final conditions.  Requires b (numerator) coefficients, a (denominator) coefficients and input (for example, step or impulse).  Optionally accepts intial conditions.  Returns the filtered response y, and the final conditions z.  Syntax: h = filter1d(b, a, x); or, optionally, h = filter1d(b, a, x, z);  Example: x = impulse(141, 20); b = [1]; a = [1, -1, 0.9]; h = filter1d(b, a, x); y = gety(h);  // The filter response. z = getz(h);  // The final conditions of the filter. s = math.sum(math.abs(y)); // The magnitude of the response.  See also, impulse, step, gety, getz, samples",
  sinewave: "Description: Generates a sinewave.  All parameters are optional.  By default, amplitude = 1, cycles = 1, and data length = 512.  Syntax: sw = sinewave(); or, optionally, sw = sinewave(myAmp, myCycles, myLength);  Example: myAmp = 12; myCycles = 4; myLength = 300; sw = sinewave(myAmp, myCycles, myLength);  See also: squarewave, trianglewave, sawtoothwave, impulse, step, gauss",
  squarewave: "Description: Generates a squarewave.  All parameters are optional.  By default, amplitude = 1, cycles = 1, data length = 512 and scale = 20 (scale can change edge rate where scale = 1 is a sinewave).  Syntax: sqw = squarewave(); or, optionally, sqw = squarewave(myAmp, myCycles, myLength, myScale);  Example: myAmp = 12; myCycles = 4; myLength = 300; myScale = 40; sqw = squarewave(myAmp, myCycles, myLength, myScale);  See also: sinewave, trianglewave, sawtoothwave, impulse, step, gauss",
  trianglewave: "Description: Generates a trianglewave.  All parameters are optional.  By default, amplitude = 1, cycles = 1, and data length = 512.  Syntax: tw = trianglewave(); or, optionally, tw = trianglewave(myAmp, myCycles, myLength);  Example: myAmp = 12; myCycles = 4; myLength = 300; tw = trianglewave(myAmp, myCycles, myLength);  See also: sinewave, squarewave, sawtoothwave, impulse, step, gauss",
  sawtoothwave: "Description: Generates a sawtoothwave.  All parameters are optional.  By default, amplitude = 1, cycles = 1, and data length = 512.  Syntax: saw = sawtoothwave(); or, optionally, saw = sawtoothwave(myAmp, myCycles, myLength);  Example: myAmp = 12; myCycles = 4; myLength = 300; saw = sawtoothwave(myAmp, myCycles, myLength);  See also: sinewave, squarewave, trianglewave, impulse, step, gauss",
  impulse: "Description: Generates an impulse waveform.  All parameters are optional.  By default, data length = 512 and impulse position is length / 4.  Syntax: im = impulse(); or, optionally, im = impulse(myLength, myPosition);  Example: myLength = 300; myPosition = 50; im = impulse(myLength, myPosition);  See also: sinewave, squarewave, trianglewave, sawtoothwave, step, gauss",
  step: "Description: Generates a step waveform.  All parameters are optional.  By default, data length = 512 and step position is length / 4.  Syntax: st = step(); or, optionally, st = step(myLength, myPosition);  Example: myLength = 300; myPosition = 50; st = step(myLength, myPosition);  See also: sinewave, squarewave, trianglewave, sawtoothwave, impulse, gauss",
  gauss: "Description: Generates a random (normal) waveform.  The length of the array is optional.  By default, data length = 512.  Syntax: gs = gauss(); or, optionally, gs = gauss(myLength);  Example: myLength = 300; gs = gauss(myLength);  See also: sinewave, squarewave, trianglewave, sawtoothwave, impulse, step",
  line: "Description: A chart that uses lines to connect data points, but does not display the points themselves.  Requires at least two arrays, the first is considered the x axis values, the next and subsequent arrays are considered y axis values. The arrays do not need to be the same length, however, the length of the x axis sets the maximum plotted length.   Syntax: line(x, y)  Example: x = range(1, 10); y2 = square(x); y3 = cube(x); line(x, y2, y3)  See also: linepts, curve, curvepts, samples, xaxis, yaxis",
  linepts: "Description: A chart that uses lines to connect data points, displaying the points themselves.  Requires at least two arrays, the first is considered the x axis values, the next and subsequent arrays are considered y axis values. The arrays do not need to be the same length, however, the length of the x axis sets the maximum plotted length.   Syntax: linepts(x, y)  Example: x = range(1, 10); y2 = square(x); y3 = cube(x); linepts(x, y2, y3)  See also: line, curve, curvepts, samples, xaxis, yaxis",
  curve: "Description: A chart that uses curved lines (splines) to connect data points, but does not display the points themselves.  Requires at least two arrays, the first is considered the x axis values, the next and subsequent arrays are considered y axis values. The arrays do not need to be the same length, however, the length of the x axis sets the maximum plotted length.   Syntax: curve(x, y)  Example: x = range(1, 10); y2 = square(x); y3 = cube(x); curve(x, y2, y3)  See also: line, linepts, curvepts, samples, xaxis, yaxis",
  curvepts: "Description: A chart that uses curved lines (splines) to connect data points, displaying the points themselves.  Requires at least two arrays, the first is considered the x axis values, the next and subsequent arrays are considered y axis values. The arrays do not need to be the same length, however, the length of the x axis sets the maximum plotted length.   Syntax: curvepts(x, y)  Example: x = range(1, 10); y2 = square(x); y3 = cube(x); curvepts(x, y2, y3)  See also: line, linepts, curve, samples, xaxis, yaxis",
  samples: "Description: A chart that uses discrete points to display data or, in the case of multiple y arrays, a bar configuration.  Requires at least two arrays, the first is considered the x axis values, the next and subsequent arrays are considered y axis values. The arrays do not need to be the same length, however, the length of the x axis sets the maximum plotted length.   Syntax: samples(x, y)  Example: x = range(1,10); y = square(x); samples(x, y)  See also: line, linepts, curve, curvepts, xaxis, yaxis",
  xaxis: 'Description: Adds a label to the x axis of the current chart.  String name should be double quoted.  Syntax: xaxis("data x")  Example: x = range(1,10); y = square(x); samples(x, y) xaxis("samples (n)") See also: line, linepts, curve, curvepts, samples, yaxis',
  yaxis: 'Description: Adds a label to the y axis of the current chart.  String name should be double quoted.  Syntax: yaxis("data y")  Example: x = range(1,10); y = square(x); samples(x, y) xaxis("samples (n)") yaxis("x^2") See also: line, linepts, curve, curvepts, samples, xaxis',
  getData: 'Description: Functions that return multiple parameters return them as objects (for example, conv, deconv, corr, filter1d).  This function allows you to retrieve a specific parameter.  Parameter name should be double quoted.  Syntax: getData("y", myConv);  Example: xdata = [3, 11, 7, 0, -1, 4, 2]; hdata = [2, 3, 0, -5, 2, 1]; yc = conv(xdata, hdata); y = getData("y", yc); n = getData("n", yc); samples(n,y) See also: gety, getn, getq, getqn, getr, getrn, getz, conv, deconv, corr, filter1d',
  gety: 'Description: A shortcut for y = getData("y", myVar);  Syntax: y = gety(myVar); Example: xdata = [3, 11, 7, 0, -1, 4, 2]; hdata = [2, 3, 0, -5, 2, 1]; yc = conv(xdata, hdata); y = gety(yc); n = getn(yc); samples(n,y)  See also: getData, getn, getq, getqn, getr, getrn, getz, conv, corr',
  getn: 'Description: A shortcut for n = getData("n", myVar);  Syntax: n = getn(myVar); Example: xdata = [3, 11, 7, 0, -1, 4, 2]; hdata = [2, 3, 0, -5, 2, 1]; yc = conv(xdata, hdata); y = gety(yc); n = getn(yc); samples(n,y)  See also: getData, gety, getq, getqn, getr, getrn, getz, conv, corr',
  getq: 'Description: A shortcut for q = getData("q", myVar);  Syntax: q = getq(myVar); Example:  num = [1, 1, 1, 1, 1, 1]; nn = range(-2, 3); den = [1, 2, 1]; dn = range(-1, 1); qrem = deconv(num, den, nn, dn); q = getq(qrem); r = getr(qrem); qn = getqn(qrem); rn = getrn(qrem);  See also: getData, gety, getn, getqn, getr, getrn, getz, deconv',
  getqn: 'Description: A shortcut for qn = getData("qn", myVar);  Syntax: qn = getq(myVar); Example:  num = [1, 1, 1, 1, 1, 1]; nn = range(-2, 3); den = [1, 2, 1]; dn = range(-1, 1); qrem = deconv(num, den, nn, dn); q = getq(qrem); r = getr(qrem); qn = getqn(qrem); rn = getrn(qrem);  See also: getData, gety, getn, getq, getr, getrn, getz, deconv',
  getr: 'Description: A shortcut for r = getData("r", myVar);  Syntax: r = getr(myVar); Example:  num = [1, 1, 1, 1, 1, 1]; nn = range(-2, 3); den = [1, 2, 1]; dn = range(-1, 1); qrem = deconv(num, den, nn, dn); q = getq(qrem); r = getr(qrem); qn = getqn(qrem); rn = getrn(qrem);  See also: getData, gety, getn, getq, getqn, getrn, getz, deconv',
  getrn: 'Description: A shortcut for rn = getData("rn", myVar);  Syntax: rn = getrn(myVar); Example:  num = [1, 1, 1, 1, 1, 1]; nn = range(-2, 3); den = [1, 2, 1]; dn = range(-1, 1); qrem = deconv(num, den, nn, dn); q = getq(qrem); r = getr(qrem); qn = getqn(qrem); rn = getrn(qrem);  See also: getData, gety, getn, getq, getqn, getr, getz, deconv',
  getz: 'Description: A shortcut for z = getData("z", myVar);  Syntax: z = getz(myVar); Example:  x = impulse(141, 20); b = [1]; a = [1, -1, 0.9]; h = filter1d(b, a, x); y = gety(h); z = getz(h);   See also: getData, gety, getn, getq, getqn, getr, getrn, filter1d',
  length: "Description: Returns the length of a one dimensional array.  Syntax: len = length(x);  Example: x = squarewave(); len = length(x);  See also: size",
  addSeqs: "Description: Adds two sequences (as arrays) including timing information.  Sequences do not have to be the same length.  Syntax: seqsum = addSeqs(x, w, nx, nw);  Example: x = [3, 11, 7, 0, -1, 4, 2]; n = range(-3, 3); nm2 = range(-1, 5); w = gauss(length(x)); seqsum = addSeqs(x, w, nm2, nm2); xcorr = corr(x, gety(seqsum), n, getn(seqsum));  See also: corr, add, gety, getn"
}